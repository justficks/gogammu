package tests

import (
	"reflect"
	"testing"

	gammu "github.com/justficks/gogammu"
)

func TestExtractDevices(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected map[int]string
	}{
		{
			name: "Valid data",
			input: `; Configuration file generated by gammu-detect.
					; Please check The Gammu Manual for more information.
					
					[gammu]
					device = /dev/ttyUSB0
					name = Phone on USB serial port 04e2 1414
					connection = at
					
					[gammu1]
					device = /dev/ttyUSB1
					name = Phone on USB serial port 04e2 1414
					connection = at
					
					[gammu2]
					device = /dev/ttyUSB2
					name = Phone on USB serial port 04e2 1414
					connection = at`,
			expected: map[int]string{
				0: "/dev/ttyUSB0",
				1: "/dev/ttyUSB1",
				2: "/dev/ttyUSB2",
			},
		},
		{
			name: "Valid data",
			input: `[gammu10]
					device = /dev/ttyUSB31
					name = Phone on USB serial port 04e2 1414
					connection = at
					
					[gammu11]
					device = /dev/ttyUSB7
					name = Phone on USB serial port 04e2 1414
					connection = at`,
			expected: map[int]string{
				10: "/dev/ttyUSB31",
				11: "/dev/ttyUSB7",
			},
		},
		{
			name: "Valid data",
			input: `[gammu25]
					device = /dev/ttyUSB21
					name = Phone on USB serial port 04e2 1414
					connection = at
					
					[gammu26]
					device = /dev/ttyUSB22
					name = Phone on USB serial port 04e2 1414
					connection = at
					
					[gammu32]
					device = /dev/ttyS0
					name = Phone on serial port 0
					connection = at`,
			expected: map[int]string{
				25: "/dev/ttyUSB21",
				26: "/dev/ttyUSB22",
			},
		},
		{
			name: "No USB devices",
			input: `[gammu32]
					device = /dev/ttyS0
					name = Phone on serial port 0
					connection = at`,
			expected: map[int]string{},
		},
		{
			name:     "Empty string",
			input:    "",
			expected: map[int]string{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			got := gammu.ExtractUSBDevices(test.input)
			if !reflect.DeepEqual(got, test.expected) {
				t.Errorf("Expected: %v, Got: %v", test.expected, got)
			}
		})
	}
}
